image: ubuntu:latest

# You do not need this job if you use an interpreted language such as Python
build-job:
  stage: build
  script:
    - apt-get update -y && apt install -y make cmake g++ git libboost-all-dev
    - git submodule update --init --recursive
    - cd code-coverage
    - make build
    - cd ..
    - cd fuzzer
    - make build
    - cd ..
    - cd seed-generator
    - make build
    - cd ..
  artifacts:
    paths:
      - "code-coverage/build/"
      - "fuzzer/build/"
      - "seed-generator/build/"
    expire_in: 1 hour

task1-test:
  stage: test
  dependencies:
    - build-job
  rules:
    - changes: 
      - code-coverage/*
      - .gitlab-ci.yml
  script:
    - apt-get update -y && apt install -y make cmake g++ lcov git
    - git submodule update --init --recursive
    - cd code-coverage
    - make test
  coverage: "/lines......: (\\d+\\.\\d+%)/" #Look at those regexes for your specific code coverage tool,  https://docs.gitlab.com/ee/ci/testing/code_coverage.html#test-coverage-examples

task2-3-test:
  stage: test
  dependencies:
    - build-job
  rules:
    - changes: 
      - fuzzer/*
      - .gitlab-ci.yml
  script:
    - apt-get update -y && apt install -y make cmake g++ lcov libboost-all-dev libgtest-dev curl llvm-17 clang-17
    - curl -1sLf 'https://dl.cloudsmith.io/public/mull-project/mull-stable/setup.deb.sh' | bash
    - apt-get update -y && apt install -y mull-17
    - cd fuzzer
    - make test
  coverage:  "/lines......: (\\d+\\.?\\d*%)/"
  artifacts:
    paths:
      - "fuzzer/coverage.txt" # contains just the coverage percentage as a number
      - "fuzzer/mutation.txt" # contains the mutation score as a number

task4-test:
  stage: test
  dependencies:
    - build-job
  rules:
    - changes: 
      - seed-generator/*
      - .gitlab-ci.yml
  script:
    - apt-get update -y && apt install -y make cmake g++ lcov git
    - git submodule update --init --recursive
    - cd seed-generator
    - make test
  coverage:  "/lines......: (\\d+\\.?\\d*%)/"
  artifacts:
    paths:
      - "seed-generator/coverage.txt" # contains just the coverage percentage as a number

task1-benchmark:
  stage: test
  dependencies:
    - build-job
  rules:
    - changes: 
      - code-coverage/*
      - .gitlab-ci.yml
  script:
    - apt-get update -y && apt install -y make cmake g++
    - cd code-coverage
    - make benchmark

task1-grade:
  image:
    name: pierredb/ni-apt-grader:latest
    pull_policy: always
  rules:
    - changes: 
      - code-coverage/*
      - .gitlab-ci.yml
  stage: test
  #needs: ["task1-test", "task1-benchmark"]
  script:
    - apt-get update -y && apt install -y make cmake g++ lcov git
    - git submodule update --init --recursive
    - export PROJECT_DIR=$PWD
    - cd /grader
    - ./grade --task 1 $PROJECT_DIR/code-coverage

task2-grade:
  image:
    name: pierredb/ni-apt-grader:latest
    pull_policy: always
  rules:
    - changes: 
      - fuzzer/*
      - .gitlab-ci.yml
  stage: test
  #needs: ["task2-test"]
  script:
    - export PROJECT_DIR=$PWD
    - export FUZZER=blackbox
    - cd /grader
    - ./grade --task 2 $PROJECT_DIR/fuzzer

task3-grade:
  image:
    name: pierredb/ni-apt-grader:latest
    pull_policy: always
  rules:
    - changes: 
      - code-coverage/*
      - fuzzer/*
      - .gitlab-ci.yml
  stage: test
  #needs: ["task2-test"]
  script:
    - export PROJECT_DIR=$PWD
    - export FUZZER=greybox
    - cd /grader
    - ./grade --task 3 $PROJECT_DIR/fuzzer

task4-grade:
  image:
    name: pierredb/ni-apt-grader:latest
    pull_policy: always
  rules:
    - changes: 
      - code-coverage/*
      - fuzzer/*
      - seed-generator/*
      - .gitlab-ci.yml
  stage: test
  #needs: ["test"]
  script:
    - export PROJECT_DIR=$PWD
    - export FUZZER=best
    - cd /grader
    - ./grade --task 4 $PROJECT_DIR/fuzzer
